1. An identifier cannot be declared multiple times in the same scope. 
=> done through create_entry_and_insert function

2. An identifier must be declared before its use.
=> done by get_lexeme function


3. The types and the number of parameters returned by a function must be the same as that of the parameters used in invoking the function.
-> done in check function call

4. The parameters being returned by a function must be assigned a value. If a parameter does not get a value assigned within the function definition, it should be reported as an error.
-> done in module def

5. The function that does not return any value, must be invoked appropriately. 
void function handling
-> done in function call

6. Function input parameters passed while invoking it should be of the same type as those used in the function definition.
-> done in function call

7. Function overloading is not allowed.
-> done in create function entry

8. A function declaration for a function being used (say F1) by another (say F2) must precede the definition of the function using it(i.e. F2), only if the function definition of F1 does not precede the definition of F2.4
-> To be checked in module Def

9. If the function definition of F1 precedes function definition of F2(the one which uses F1), then the function declaration of F1 is redundant and is not valid.
-> TO be checked

10. A switch statement with an integer typed identifier associated with it, can have case statement with case keyword followed by an integer only and the case statements must be followed by a default statement.
=> done in check_switch call

11. A switch statement with an identifier of type real is not valid and an error should be reported.
=> done in check_switch call

12. A switch statement with a boolean type identifier can have the case statements with labels true and false only. The switch statement then should not have a default statement.
=>done in check_switch call


13. A for statement must not redefine the variable that participates in the iterating over the range.
-> checked in semantic analysis

14. The function cannot be invoked recursively.
-> checked in check_function_call

15. An identifier used beyond its scope must be viewed as undefined etc. (More semantics will be made available in the test cases)
-> done in get_lexeme
 